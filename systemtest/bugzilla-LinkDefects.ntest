# -*-Perl-*-
# bugzilla.ntest -
#
# Exercise procedure LinkDefects in EC-DefectTracking-Bugzilla
#
# Copyright (c) 2005-2010 Electric Cloud, Inc.
# All rights reserved

use strict;
use ECTest;
use ECSelenium;
require "$::gTestFileDir/../../EC-DefectTracking/systemtest/ntest.common";
$::gProjectImported = 0;
$::gConfigCreated = 0;

sub importProject() {
    assertOK($::N->import( { file =>"$::gTestFileDir/bugzilla-LinkDefects.xml", path  => '/projects/bugzilla-LinkDefects', force => 1 } ), 'import bugzilla-LinkDefects project');
    assertOK($::N->getProcedure('bugzilla-LinkDefects', 'cfgDoesNotExist'),'cfgDoesNotExist procedure exists');
    $::gProjectImported = 1;
}

sub createConfig() {
    my $xpath = $::N->runProcedure("$::gPlugin_name",  { procedureName => "CreateConfiguration", pollInterval  => '0.2', timeout       => 600, actualParameter => [ 
            { actualParameterName => 'config', value => "bugzillaCfgTestServer" }, 
            { actualParameterName => 'desc', value => "Bugzilla configuration" }, 
            { actualParameterName => 'url', value => "http://bugzilla/" }, 
            { actualParameterName => 'credential', value => "test" }, 
            { actualParameterName => 'product', value => "TestProduct" }, 
            { actualParameterName => 'version', value => 'unspecified' }, 
            { actualParameterName => 'component', value => 'TestComponent' },
            { actualParameterName => 'priority', value => 'P5' },
            { actualParameterName => 'severity', value => 'normal' },
          ],
          credential => [ 
            { credentialName => 'test', userName => "testuser\@electric-cloud.com", password => "testuser", },
          ],
        });
    assertOK($xpath, 'run create configuration procedure');
    my $jobId = 0;
    my $status = '';
    assertDef($xpath, 'runProcedure finished without a timeout');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    writeFile("$::gCurrentTestDir/createConfiguration.log","====Job Details====\n$xpath->{_xml}\n");
    $xpath = $::N->getProperty("/projects/$::ECdt/defectTracking_cfgs/bugzillaCfgTestServer/defectTrackingPlugin");
    assertEq('EC-DefectTracking-Bugzilla',$xpath->findvalue('//value')->string_value, 'configuration type');
    $xpath = $::N->getCredential("$::ECdt",'bugzillaCfgTestServer');
    assertEq("testuser\@electric-cloud.com",$xpath->findvalue('//userName')->string_value, 'Credential user');
    $::gConfigCreated = 1;
}

sub doSetup() {
    if(! $::gProjectImported) {
        importProject();
    }
    if (! $::gConfigCreated) {
        createConfig();
    }
}

ntest 'noDefaultProperty', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'noDefaultProperty', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/noDefaultProperty.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('No defect IDs found, returning', $data, 'noDefaultProperty output');
};

ntest 'emptyPropertiesInDefaultPropertySheet', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'emptyPropertiesInDefaultPropertySheet', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/emptyPropertiesInDefaultPropertySheet.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('No change logs found, returning', $data, 'emptyPropertiesInDefaultPropertySheet-logs output');
    assertSubstring('No defect IDs found, returning', $data, 'emptyPropertiesInDefaultPropertySheet-ids output');
};

ntest 'defaultPropertyContainsInaccessibleDefectIDs', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'defaultPropertyContainsInaccessibleDefectIDs', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/defaultPropertyContainsInaccessibleDefectIDs.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('No defect IDs found, returning', $data, 'defaultPropertyContainsInaccessibleDefectIDs output');
};

ntest 'defaultPropertyContainsOneDefectID', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'defaultPropertyContainsOneDefectID', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/jobDetails.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Found defect ID: Bug2', $data, 'defaultPropertyContainsOneDefectID-id output');
    assertSubstring('Creating link /commander/pages/EC-DefectTracking-Bugzilla-', $data, 'defaultPropertyContainsOneDefectID-link output');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/defectLinks', recurse => '1'});
    writeFile("$::gCurrentTestDir/getProperties.log","====getProperties====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bug 2: test 2, STATUS=NEW', $propName,'URL name');
    my $propValue = $xpath->findvalue('//property/value');
    assertEq('http://bugzilla//show_bug.cgi?id=2', $propValue,'URL value');
};

ntest 'defaultPropertyContainsChangeLogOutput', {}, sub {
    doSetup();
    # run test job
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'defaultPropertyContainsChangeLogOutput', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/jobDetails.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring(outdent('
           |Found defect ID: Bug1
            Found defect ID: Bug2
            Found defect ID: Bug3
            '), $data, 'defaultPropertyContainsChangeLogOutput-ids output');
    assertSubstring('Creating link /commander/pages/EC-DefectTracking-Bugzilla-', $data, 'defaultPropertyContainsChangeLogOutput-link output');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/defectLinks', recurse => '1'});
    writeFile("$::gCurrentTestDir/getProperties-defectLinks.log","====getProperties-defectLinks====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bug 1: test summary, STATUS=NEWBug 2: test 2, STATUS=NEWBug 3: test update, STATUS=NEW', $propName,'URL name');
    my $propValue = $xpath->findvalue('//property/value');
    assertEq('http://bugzilla//show_bug.cgi?id=1http://bugzilla//show_bug.cgi?id=2http://bugzilla//show_bug.cgi?id=3', $propValue,'URL value');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/report-urls'});
    writeFile("$::gCurrentTestDir/getProperties-report-urls.log","====getProperties-report-urls====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bugzilla Report', $propName,'Link name');
    my $propValue = $xpath->findvalue('//property/value');
    assertSubstring('/commander/pages/EC-DefectTracking-Bugzilla-', $propValue,'Link value');
};

ntest 'defaultPropertySheetContainsTwoDefectIDs', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'defaultPropertySheetContainsTwoDefectIDs', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/jobDetails.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring(outdent('
           |Found defect ID: Bug2
            Found defect ID: Bug1
            '), $data, 'defaultPropertySheetContainsTwoDefectIDs-ids output');
    assertSubstring('Creating link /commander/pages/EC-DefectTracking-Bugzilla-', $data, 'defaultPropertySheetContainsTwoDefectIDs-link output');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/defectLinks', recurse => '1'});
    writeFile("$::gCurrentTestDir/getProperties-defectLinks.log","====getProperties-defectLinks====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bug 1: test summary, STATUS=NEWBug 2: test 2, STATUS=NEW', $propName,'URL name');
    my $propValue = $xpath->findvalue('//property/value');
    assertEq('http://bugzilla//show_bug.cgi?id=1http://bugzilla//show_bug.cgi?id=2', $propValue,'URL value');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/report-urls'});
    writeFile("$::gCurrentTestDir/getProperties-report-urls.log","====getProperties-report-urls====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bugzilla Report', $propName,'Link name');
    my $propValue = $xpath->findvalue('//property/value');
    assertSubstring('/commander/pages/EC-DefectTracking-Bugzilla-', $propValue,'Link value');
};

ntest 'customProperty', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'customProperty', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/jobDetails.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Parsing property /myJob/customProperty for defect IDs', $data,'customProperty-property output');
    assertSubstring(outdent('
           |Found defect ID: Bug1
            Found defect ID: Bug2
            Found defect ID: Bug3
            '), $data, 'customProperty-ids output');
    assertSubstring('Creating link /commander/pages/EC-DefectTracking-Bugzilla-', $data, 'customProperty-link output');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/defectLinks', recurse => '1'});
    writeFile("$::gCurrentTestDir/getProperties-defectLinks.log","====getProperties-defectLinks====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bug 1: test summary, STATUS=NEWBug 2: test 2, STATUS=NEWBug 3: test update, STATUS=NEW', $propName,'URL name');
    my $propValue = $xpath->findvalue('//property/value');
    assertEq('http://bugzilla//show_bug.cgi?id=1http://bugzilla//show_bug.cgi?id=2http://bugzilla//show_bug.cgi?id=3', $propValue,'URL value');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/report-urls'});
    writeFile("$::gCurrentTestDir/getProperties-report-urls.log","====getProperties-report-urls====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bugzilla Report', $propName,'Link name');
    my $propValue = $xpath->findvalue('//property/value');
    assertSubstring('/commander/pages/EC-DefectTracking-Bugzilla-', $propValue,'Link value');
};

ntest 'customPropertySheet', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'customPropertySheet', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    $xpath = $::N->getJobDetails($jobId);
    my $ws = $xpath->findvalue('//workspace/winUNC');
    if (!isWindows()) {
        $ws = $xpath->findvalue('//workspace/unix');
    }
    my $logFileName = $ws . '/' . $xpath->findvalue("//jobStep[stepName='Bugzilla - Link Defects']/calledProcedure/jobStep[stepName='runMethod']/logFileName");
    my $data = readFile($logFileName);
    writeFile("$::gCurrentTestDir/jobDetails.log","====Job Details====\n$xpath->{_xml}\n====LOG====\n$data\n");
    assertSubstring('Parsing property /myJob/customPropertySheet/ for defect IDs', $data,'customPropertySheet-propertySheet output');
    assertSubstring(outdent('
           |Found defect ID: Bug1
            Found defect ID: Bug2
            '), $data, 'customPropertySheet-ids output');
    assertSubstring('Creating link /commander/pages/EC-DefectTracking-Bugzilla-', $data, 'customPropertySheet-link output');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/defectLinks', recurse => '1'});
    writeFile("$::gCurrentTestDir/getProperties-defectLinks.log","====getProperties-defectLinks====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bug 1: test summary, STATUS=NEWBug 2: test 2, STATUS=NEW', $propName,'URL name');
    my $propValue = $xpath->findvalue('//property/value');
    assertEq('http://bugzilla//show_bug.cgi?id=1http://bugzilla//show_bug.cgi?id=2', $propValue,'URL value');
    $xpath = $::N->getProperties({jobId => "$jobId", path => '/myJob/report-urls'});
    writeFile("$::gCurrentTestDir/getProperties-report-urls.log","====getProperties-report-urls====\n$xpath->{_xml}\n");
    my $propName = $xpath->findvalue('//property/propertyName');
    assertEq('Bugzilla Report', $propName,'Link name');
    my $propValue = $xpath->findvalue('//property/value');
    assertSubstring('/commander/pages/EC-DefectTracking-Bugzilla-', $propValue,'Link value');
};

ntest 'verifyReportLink', {}, sub {
    doSetup();
    my $xpath = $::N->runProcedure('bugzilla-LinkDefects', { procedureName => 'customPropertySheet', pollInterval  => '1', timeout       => 600, actualParameter => [
            {actualParameterName => 'resource', value => "$::gAgentResource"},
            ]
        });
    my $jobId = 0;
    my $status = '';
    assertOK($xpath, 'runProcedure finished');
    if ($xpath) {
        $jobId  = $xpath->findvalue('//jobId');
        $status = $xpath->findvalue('//status');
        assertTrue($jobId && $jobId ne "",'valid job id');
        assertEq('completed',$status,"job $jobId complete");
        if ($status ne 'completed') {
            assertOK($::N->abortJob($jobId, {force => 1}));
        }
    }
    my $sel = setupSelenium();
    login($sel);
    my $page = "/commander/link/jobDetails/jobs/$jobId";
    $sel->open($page);
    waitForElement($sel, 'reRunJobList');
    click($sel, 'css=.jobSummary_report a');
    assertEq('OK', waitForText($sel, 'Bug2'));
    my $text = getText($sel, 'css=.formBuilder tr:first-child');
    assertSubstring('Bug1:', $text);
    $text = getText($sel, 'css=.formBuilder tr:first-child+tr+tr');
    assertSubstring('Bug2:', $text);
    click($sel, 'css=.formBuilder tr:first-child a');
    assertEq('OK', waitForElement($sel, 'issue_key_NMB-4'));
};
